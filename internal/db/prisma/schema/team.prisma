model Team {
  id          String        @id @default(cuid())
  name        String        @db.VarChar(256)
  description String        @db.VarChar(256)
  teamMember  TeamMember[]
  api         Api[]
  teamWebsite TeamWebsite[]
  teamApi     TeamApi[]
  teamMonitor TeamMonitor[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt

  @@map("team")
}

model TeamMember {
  id        String   @id @default(cuid())
  userId    String   @db.VarChar(256)
  teamId    String   @db.VarChar(256)
  role      String   @db.VarChar(256)
  accepted  Boolean  @default(false)
  active    Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([userId, teamId])
  @@map("team_member")
}

model TeamWebsite {
  id        String   @id @default(cuid())
  teamId    String   @db.VarChar(256)
  websiteId String   @db.VarChar(256)
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  website   Website  @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([teamId, websiteId])
  @@map("team_website")
}

model TeamApi {
  id        String   @id @default(cuid())
  teamId    String   @db.VarChar(256)
  apiId     String   @db.VarChar(256)
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  api       Api      @relation(fields: [apiId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([teamId, apiId])
  @@map("team_api")
}

model TeamMonitor {
  id        String   @id @default(cuid())
  teamId    String   @db.VarChar(256)
  monitorId String   @db.VarChar(256)
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  monitor   Monitor  @relation(fields: [monitorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([teamId, monitorId])
  @@map("team_monitor")
}
